{{define "room"}}
<div class="container">
    <div class="row">
        <div class="col text-center">
            <a href="#!" id="check-availability-button" class="btn btn-success">Check Availability</a>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.2.0/dist/js/datepicker-full.min.js"></script>
<script src="https://unpkg.com/notie"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
document.getElementById("check-availability-button").addEventListener("click", function () {
    let html = `
    <form id="check-availability-form" action="" method="POST" novalidate class="needs-validation">
        <div class="row">
            <div class="col">
                <div class="row" id="reservation-dates-modal">
                    <div class="col">
                        <input required class="form-control" type="text" name="start" id="start" placeholder="arrival" />
                    </div>
                    <div class="col">
                        <input required class="form-control" type="text" name="end" id="end" placeholder="departure" />
                    </div>
                </div>
            </div>
        </div>
    </form>
    `;
    return attention.custom({
        msg:html,
        title:'{{index .StringMap "room_name"}} Availability',
        callback: function (result) {
            console.log("called");
            console.log(result);

            let form = document.getElementById("check-availability-form");
            let formData = new FormData(form);
            formData.append("csrf_token", "{{.CSRFToken}}");

            fetch('/search-availability-json', {
                method: "post",
                body: formData,
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                })
        },
        willOpen: () => {
            const elem = document.getElementById("reservation-dates-modal");
            const rp = new DateRangePicker(elem, {
                format: 'yyyy-mm-dd',
                showOnFocus: true,
            });
        },

    });
});

    let attention = Prompt();

    function Prompt() {
        let toast = function (c) {
            const{
                msg = '',
                icon = 'success',
                position = 'top-end',

            } = c;

            const Toast = Swal.mixin({
                toast: true,
                title: msg,
                position: position,
                icon: icon,
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer)
                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                }
            })

            Toast.fire({})
        }

        let success = function (c) {
            const {
                msg = "",
                title = "",
                footer = "",
            } = c

            Swal.fire({
                icon: 'success',
                title: title,
                text: msg,
                footer: footer,
            })

        }

        let error = function (c) {
            const {
                msg = "",
                title = "",
                footer = "",
            } = c

            Swal.fire({
                icon: 'error',
                title: title,
                text: msg,
                footer: footer,
            })

        }

        async function custom(c) {
            const {
                msg = "",
                title = "",
            } = c;

            const {value: result} = await Swal.fire({
                title: title,
                html: msg,
                backdrop: false,
                focusConfirm: false,
                showCancelButton: true,
                willOpen: () => {
                    if (c.willOpen !== undefined) {
                        c.willOpen();
                    }
                },
                didOpen: () => {
                    if (c.didOpen !== undefined) {
                        c.didOpen();
                    }
                },
                preConfirm: () => {
                    if (c.preConfirm !== undefined) {
                        c.preConfirm();
                    }
                }
            });

            if (result) {
                if (result.dismiss !== Swal.DismissReason.cancel) {
                    if (result.value !== "") {
                        if (c.callback !== undefined) {
                            c.callback(result);
                        }
                    } else {
                        c.callback(false);
                    }
                } else {
                    c.callback(false);
                }
            }
        }

        return {
            toast: toast,
            success: success,
            error: error,
            custom: custom,
        }
    }

</script>
{{end}}